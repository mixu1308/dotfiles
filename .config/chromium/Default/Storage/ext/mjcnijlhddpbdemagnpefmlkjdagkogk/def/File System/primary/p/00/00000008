<div  lang="en">
<div class="article-entry markdown-body" itemprop="articleBody" nodeIndex="104">   <br nodeIndex="195"><p nodeIndex="105">I recently purchased a Dell Precision 5530 mobile workstation for my development purposes. As expected of me, I began making preparations for installing Arch Linux on this system. For a moment I thought, <em nodeIndex="196">why not make the most out of this hardware by fine-tuning everything?</em> Upon further researching, I found that one of the most important factors in improving performance is the filesystem which is used. As it turned out, my system had a 512 GB class 40 M.2 NVME SSD. I read up various articles from Arch wiki, Gentoo wiki and other threads coming to a conclusion that Btrfs is the choice of filesystem for my new workstation.</p>
<p nodeIndex="106"><a href="https://en.wikipedia.org/wiki/Btrfs" target="_blank" rel="noopener" nodeIndex="197">Btrfs</a>, commonly known as &ldquo;Butter FS&rdquo; in computer jargon, is a filesystem based on &ldquo;Copy on Write&rdquo; principle with powerful features such as subvolumes, snapshots, quota management, file-level compression, etc to name a few. Various threads<sup class="footnote-ref" nodeIndex="198"><a href="https://www.hiteshpaul.com/posts/14829/#fn1" id="fnref1" nodeIndex="199">[1]</a></sup><sup class="footnote-ref" nodeIndex="200"><a href="https://www.hiteshpaul.com/posts/14829/#fn2" id="fnref2" nodeIndex="201">[2]</a></sup> recommend using it as the default filesystem for non-rotational disks. Although we can convert an existing ext4 partition into btrfs, it is best when you partition the disks as btrfs during your OS installation. Below I will show you how to set up and configure Arch Linux to use btrfs as the root as well as other partition&rsquo;s filesystem.</p>
<h1 id="create-partition" nodeIndex="107"><a class="markdownIt-Anchor" href="https://www.hiteshpaul.com/posts/14829/#create-partition" nodeIndex="202"></a> Create partition:</h1>
<p nodeIndex="108">You can use the cmd line tool which you are familiar with, to create partitions on your hard drive. For example, using <code nodeIndex="203">fdisk</code>. Btrfs subvolumes provide the flexibility of traditional partitions, therefore you may not want to create separate MBR/GPT based partitions for mount points such as <code nodeIndex="204">/home</code>, <code nodeIndex="205">/var</code>, etc as these will be emulated via subvolumes.</p>
<p nodeIndex="109">Assuming you have booted into the live installation media and have created the two required partitions one for <code nodeIndex="206">boot</code> and another for <code nodeIndex="207">root</code>, let&rsquo;s format the <code nodeIndex="208">root</code> partition as btrfs:</p>
<figure class="highlight bash" nodeIndex="209"></figure></div>
<p nodeIndex="115">Replace <code nodeIndex="216">X</code> with device number and <code nodeIndex="217">N</code> with partition number.</p>
<h1 id="create-btrfs-subvolumes" nodeIndex="116"><a class="markdownIt-Anchor" href="https://www.hiteshpaul.com/posts/14829/#create-btrfs-subvolumes" nodeIndex="218"></a> Create Btrfs subvolumes:</h1>
<p nodeIndex="117">After formatting the disk with btrfs, we can now proceed to create subvolumes as follows:</p>
<figure class="highlight bash" nodeIndex="219"></figure><p nodeIndex="123">Here, we have created three subvolumes by the name <code nodeIndex="241">@root</code>, <code nodeIndex="242">@var</code> and <code nodeIndex="243">@home</code> for mounting <code nodeIndex="244">/</code>, <code nodeIndex="245">/var</code> and <code nodeIndex="246">/home</code> respectively. We have deliberately created a seperate mountpoint for <code nodeIndex="247">/var</code> so that this partition is not backed up when we create snapshots. <code nodeIndex="248">/var</code> contains runtime files and logs which are lost when your machine is powered down. Backing this up will take unnecessary space in your precious SSD &#128556;</p>
<h1 id="mount-subvolumes" nodeIndex="124"><a class="markdownIt-Anchor" href="https://www.hiteshpaul.com/posts/14829/#mount-subvolumes" nodeIndex="249"></a> Mount subvolumes:</h1>
<figure class="highlight bash" nodeIndex="250"></figure><table nodeIndex="251" class=" ril_dataTable"><tr nodeIndex="126"><td class="gutter" nodeIndex="125">
<pre nodeIndex="127">
<span class="line" nodeIndex="252">1</span>   <br nodeIndex="253"><span class="line" nodeIndex="254">2</span>   <br nodeIndex="255"><span class="line" nodeIndex="256">3</span>   <br nodeIndex="257"><span class="line" nodeIndex="258">4</span>   <br nodeIndex="259"><span class="line" nodeIndex="260">5</span>   <br nodeIndex="261"></pre></td>
<td class="code" nodeIndex="128">
<pre nodeIndex="129">
<span class="line" nodeIndex="262"><span class="comment" nodeIndex="263"># umount /mnt</span></span>   <br nodeIndex="264"><span class="line" nodeIndex="265"><span class="comment" nodeIndex="266"># mount -o noatime,ssd,compress=zstd,space_cache,commit=120,subvol=@root /dev/sdXN /mnt</span></span>   <br nodeIndex="267"><span class="line" nodeIndex="268"><span class="comment" nodeIndex="269"># mkdir -p /mnt/{var,home}</span></span>   <br nodeIndex="270"><span class="line" nodeIndex="271"><span class="comment" nodeIndex="272"># mount -o noatime,ssd,compress=zstd,space_cache,commit=120,subvol=@var /dev/sdXN /mnt/var</span></span>   <br nodeIndex="273"><span class="line" nodeIndex="274"><span class="comment" nodeIndex="275"># mount -o noatime,ssd,compress=zstd,space_cache,commit=120,subvol=@home /dev/sdXN /mnt/home</span></span>   <br nodeIndex="276"></pre></td>
</tr></table><p nodeIndex="130"><code nodeIndex="277">ssd</code> tells btrfs to use SSD Specific options(btrfs will automatically detect and enable this if it finds a non-rotational disk).</p>
<p nodeIndex="131"><code nodeIndex="278">compress</code> allows us to specify the compression algorithm which we want to use. Btrfs provides <code nodeIndex="279">lzo</code>, <code nodeIndex="280">zstd</code> and <code nodeIndex="281">zlib</code> compression algorithms. Based on this <a href="https://www.phoronix.com/scan.php?page=article&amp;item=btrfs-zstd-compress&amp;num=1" target="_blank" rel="noopener" nodeIndex="282">phoronix</a> test case, <code nodeIndex="283">zstd</code> seems to be the better performing candidate.</p>
<p nodeIndex="132"><code nodeIndex="284">noatime</code> is used to prevent frequent disk writes by instructing the Linux kernel not to store the last access time of files/folders<sup class="footnote-ref" nodeIndex="285"><a href="https://www.hiteshpaul.com/posts/14829/#fn3" id="fnref3" nodeIndex="286">[3]</a></sup> thereby increasing the lifetime of our drive.</p>
<p nodeIndex="133"><code nodeIndex="287">space_cache</code> allows btrfs to store free space cache on disk to make caching of a block group much quicker. This will allow btrfs to find free blocks for allocations much faster<sup class="footnote-ref" nodeIndex="288"><a href="https://www.hiteshpaul.com/posts/14829/#fn4" id="fnref4" nodeIndex="289">[4]</a></sup>.</p>
<p nodeIndex="134"><code nodeIndex="290">commit</code> is the time interval in which data is written to the filesystem. I have shamelessly copied the value of 120 from Manjaro&rsquo;s minimal iso.</p>
<p nodeIndex="135"><code nodeIndex="291">subvol</code> key is used to indicate the subvolume which we want to mount at the particular location.</p>
<p nodeIndex="136">Post this, follow the regular Arch installation(if you haven&rsquo;t, check <a href="https://www.hiteshpaul.com/posts/31504/" title="this" nodeIndex="292">this</a> one out!).</p>
<p nodeIndex="137"><strong nodeIndex="293">Note 1</strong>: Btrfs does not support swap files. Instead use <a href="https://wiki.archlinux.org/index.php/Improving_performance#Zram_or_zswap" target="_blank" rel="noopener" nodeIndex="294">zram or zswap</a> as swap replacement which compresses data in-place inside RAM, a concept similar to how our mobile OS handles Memory Management.</p>
<p nodeIndex="138"><strong nodeIndex="295">Note 2</strong>: Btrfs cannot be used as <code nodeIndex="296">/boot</code> filesystem with <code nodeIndex="297">zstd</code> compression<sup class="footnote-ref" nodeIndex="298"><a href="https://www.hiteshpaul.com/posts/14829/#fn5" id="fnref5" nodeIndex="299">[5]</a></sup>. Either use a different compression or format it to <code nodeIndex="300">FAT32</code> filesystem.</p>
<h1 id="snapper-automatic-snapshots" nodeIndex="139"><a class="markdownIt-Anchor" href="https://www.hiteshpaul.com/posts/14829/#snapper-automatic-snapshots" nodeIndex="301"></a> Snapper: Automatic Snapshots</h1>
<p nodeIndex="140">Install the packages: <a href="https://aur.archlinux.org/packages/grub-btrfs/" target="_blank" rel="noopener" nodeIndex="302">grub-btrfs</a>, snapper. Follow the instructions at <a href="https://wiki.archlinux.org/index.php/Snapper" target="_blank" rel="noopener" nodeIndex="303">snapper wiki</a> for configuration. Make sure to start and enable appropriate systemd services. grub-btrfs adds the snapshots entries into grub menu, therefore allowing us to recover from system failure. To enable automatic updation of grub menu<sup class="footnote-ref" nodeIndex="304"><a href="https://www.hiteshpaul.com/posts/14829/#fn6" id="fnref6" nodeIndex="305">[6]</a></sup>, run the following:</p>
<figure class="highlight bash" nodeIndex="306"></figure><p nodeIndex="146">This will run the <code nodeIndex="325">grub-mkconfig -o /etc/default/grub</code> command each time a snapshot is created or deleted. Your snapshots will now appear in the grub menu under &ldquo;Snapshots&rdquo;.</p>
<h1 id="tlp-optional" nodeIndex="147"><a class="markdownIt-Anchor" href="https://www.hiteshpaul.com/posts/14829/#tlp-optional" nodeIndex="326"></a> TLP (Optional)</h1>
<p nodeIndex="148">Those who have installed TLP for power saving purposes, add the following at the end of your <code nodeIndex="327">/etc/default/tlp</code> file:</p>
</div>